;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Copyright (C) 2006, Johns Hopkins University.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;   - Redistributions of source code must contain the above 
;;     copyright notice, this list of conditions, and the following
;;     disclaimer. 
;;
;;   - Redistributions in binary form must reproduce the above
;;     copyright notice, this list of conditions, and the following
;;     disclaimer in the documentation and/or other materials 
;;     provided with the distribution.
;;
;;   - Neither the names of the copyright holders nor the names of any
;;     of any contributors may be used to endorse or promote products
;;     derived from this software without specific prior written
;;     permission. 
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;; A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;; OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
;; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; RFC 3174 - US Secure Hash Algorithm 1 (SHA1)
;; See: http://www.faqs.org/rfcs/rfc3174.html   
;; Original C version: 
;; Copyright (C) The Internet Society (2001).  All Rights Reserved.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;   Interface    ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bitc-version "0.10")
(interface crypt.sha1
  (import stdio bitc.stdio)
  (import stdlib bitc.stdlib)


  ;; Definition of SHA1 context
  ;; I think shaNull can never happen for the code written in a safe
  ;; language, just maintaining it for conformance with standards.
  
  (defunion sha-Result:val
    sha-Success sha-Null sha-InputTooLong sha-StateError)
  
  ;;(define sha1HashSize 20:uint32)
  
  (defstruct sha1Context:ref
    digest    : (array (mutable uint32) 5)
    lenLow    : (mutable uint32)
    lenHigh   : (mutable uint32)
    message   : (array (mutable uint8) 64)
    messNdx   : (mutable word)
    computed  : (mutable bool)
    corrupted : (mutable sha-Result))
  
  (proclaim sha1Reset:(fn (sha1Context) sha-Result))
  (proclaim sha1Input:(fn (sha1Context (vector (mutable uint8))) sha-Result))
  (proclaim sha1Result:(fn (sha1Context 
			    (by-ref (array (mutable uint8) 20)))
			   sha-Result))
  (proclaim shaResultAsString:(fn (sha-Result) string))
)  
  
