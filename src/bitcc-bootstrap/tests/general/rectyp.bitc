;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Copyright (C) 2006, Johns Hopkins University.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;   - Redistributions of source code must contain the above 
;;     copyright notice, this list of conditions, and the following
;;     disclaimer. 
;;
;;   - Redistributions in binary form must reproduce the above
;;     copyright notice, this list of conditions, and the following
;;     disclaimer in the documentation and/or other materials 
;;     provided with the distribution.
;;
;;   - Neither the names of the copyright holders nor the names of any
;;     of any contributors may be used to endorse or promote products
;;     derived from this software without specific prior written
;;     permission. 
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;; A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;; OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
;; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(bitc-version "0.9+")

; (defstruct (lst 'a) cont:'a next:(optional (lst 'a)))

; (define l1 (lst #t none))
; (define l2 (lst (the int32 10) none))
; (define l3 (lst #f (some l1)))

; (define (f x) (f x)) 
; (define l4 (letrec ((M (lambda(z) #t)) (y ())) M))
; (define l5 (letrec ((f (lambda (x) (f x)))) f))

; (defstruct (list3 'a):ref
;  contents: 'a
;  link: (optional (list3 'a)))

; (define x1 (list3 #t none))
; (define y1 (list3 (the int32 0) none))
; (define z1 (list3 #f (some x1)))
; (define x (cons #f nil))
; (define y (cons #t x))


; (define c17 (letrec ((f (PROC (lambda (x) (the int32 0)) 
; 			      f)))
; 	      f))
 
; (defstruct (clstruct120 'b 'c 'a 'd):ref  f:(PROC (fn ('c 'a) 'b) 'c))
; (define c18 (letrec ((f (PROC (lambda (y x) x) 
; 			      (clstruct120 f)))) 
; 	      f))

; (defstruct (clstruct134 'b 'c 'a 'd):ref  
;   even1:(PROC (fn ('c 'a) 'b) 'd))
; (defstruct (clstruct184 'b 'c 'a 'd):ref  
;   odd1:(PROC (fn ('c 'a) 'b) 'd))

; (define oe (letrec ((odd1 (PROC (lambda (clArg:(clstruct134 'b 'c 'a 'd) x) 
; 				  (begin (clArg.even1.fun clArg.even1.env x))) 
; 				(clstruct134 even1))) 
; 		    (even1 (PROC (lambda (clArg:(clstruct184 'b 'c 'a 'd) x) 
; 				   (begin (clArg.odd1.fun clArg.odd1.env x))) 
; 				 (clstruct184 odd1)))) 
; 	     (begin (odd1, even1))))


; (defstruct (clstruct136 'b 'c 'a 'd):ref  even1:(PROC (fn ('c 'a) 'b) 'd))
; (defstruct (clstruct186 'b 'c 'a 'd):ref  odd1:(PROC (fn ('c 'a) 'b) 'd))
; (proclaim lam232 : (fn ((clstruct136 'a 'b 'c 'b) 'c) 'a))
; (proclaim lam233 : (fn ((clstruct186 'a 'b 'c 'b) 'c) 'a))
; (define oe2 (letrec ((odd1 (PROC lam232 (clstruct136 even1))) (even1 (PROC lam233 (clstruct186 odd1)))) (begin (pair odd1 even1))))
; (define lam232 (lambda (clArg:(clstruct136 'b 'c 'a 'd) x) (begin (clArg.even1.fun clArg.even1.env x))))
; (define lam233 (lambda (clArg:(clstruct186 'b 'c 'a 'd) x) (begin (clArg.odd1.fun clArg.odd1.env x))))

