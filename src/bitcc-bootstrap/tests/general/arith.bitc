;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Copyright (C) 2006, Johns Hopkins University.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;   - Redistributions of source code must contain the above 
;;     copyright notice, this list of conditions, and the following
;;     disclaimer. 
;;
;;   - Redistributions in binary form must reproduce the above
;;     copyright notice, this list of conditions, and the following
;;     disclaimer in the documentation and/or other materials 
;;     provided with the distribution.
;;
;;   - Neither the names of the copyright holders nor the names of any
;;     of any contributors may be used to endorse or promote products
;;     derived from this software without specific prior written
;;     permission. 
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;; A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;; OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
;; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bitc-version "0.9+")

;(import stdio bitc.stdio)
;(import stdlib  bitc.stdlib)

(define i0 (the int32 0))
(define i1 (the int32 1))
(define i2 (the int32 2))

(deftypeclass (Arith 'a 'b 'c)
  (tyfn ('a 'b) 'c)
  ++: (fn ('a 'b) 'c)
  --: (fn ('a 'b) 'c)
  )

(definstance (Arith int32 int32 int32)
  + -)

; (define (lp x y)
;   (case (x, y) 
;     ((nil, nil) nil)
;     (((cons car1 cdr1), (cons car2 cdr2)) 
;      (cons (++ car1 car2) (lp cdr1 cdr2)))))

; (define (lm x y)
;   (case (x, y) 
;     ((nil, nil) nil)
;     (((cons car1 cdr1), (cons car2 cdr2)) 
;      (cons (-- car1 car2) (lp cdr1 cdr2)))))


(define (lp x y)
  (case x 
    (nil (case y 
	   (nil nil)
	   (otherwise y)))
    ((cons carx cdrx) (case y
			(nil x)
			((cons cary cdry)
			 (cons (++ carx cary)
			       (lp cdrx cdry)))))))

(define (lm x y)
  (case x 
    (nil (case y 
	   (nil nil)
	   (otherwise y)))
    ((cons carx cdrx) (case y
			(nil x)
			((cons cary cdry)
			 (cons (-- carx cary)
			       (lp cdrx cdry)))))))

;; should not work
;;(definstance (Arith (list 'a) (list 'b) (list 'c))
;; lp lm)

(definstance (Arith (list 'a) (list 'b) (list 'a))
 lp lm)

;; Should not work
;;(definstance (Arith int32 int32 int64)
;;  + -)

(definstance (Arith int64 int64 int64)
  + -)

(define (f x y) (++ x y))

(define (g x:int32 y) (++ x y))

(define (h x:int32 y:int32) (++ x y))

;; No problem yet
(define (ijk x:bool y) (++ x y))

; should not work
;(define (xyz x:int32 y:int64) (++ x y))
;(define (lmn x y:bool) (ijk x y))


(define (main argVec:(vector string))
 (++ (cons i0 nil) (cons i0 nil))
 (++ i0 i1)
 i0
 )


