This is a test string
*
 * Copyright (C) 2005, The EROS Group, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 *
 *   - Redistributions of source code must contain the above 
 *     copyright notice, this list of conditions, and the following
 *     disclaimer. 
 *
 *   - Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions, and the following
 *     disclaimer in the documentation and/or other materials 
 *     provided with the distribution.
 *
 *   - Neither the names of the copyright holders nor the names of any
 *     of any contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
 

#include <stdint.h>
#include <stdlib.h>
#include <dirent.h>
#include <fstream>
#include <iostream>
#include <string>
#include <sstream>
#include <libsherpa/UExcept.hxx>
#include <libsherpa/CVector.hxx>
#include <libsherpa/avl.hxx>
#include <assert.h>
#include "die.hxx"
#include "AST.hxx"
#include "Environment.hxx"
#include "Type.hxx"
#include "TypeScheme.hxx"
#include "Typeclass.hxx"
#include "Unify.hxx"
#include "Symtab.hxx"
#include "backend.hxx"
#include "inter-pass.hxx"
#include "machine-dep.hxx"
#include "Options.hxx"

using namespace sherpa;
using namespace std;


/*********************************************************************
                        HANDLING MUTABILITY
			*******************
1. In theory, every type could have its mutability status to be one of:
    -- mutable
    -- immutable
    -- undecided / also called maybe (short for maybe-mutable)
    with obvious meanings.

2. In practice, when a type record is created for a type `t', it
   stands fot the immutable version of that type. If the type is
   mutable, it is wrapped by a ty_mutable type record. If undecided,
   it is wrapped by a ty_maybe type record. These will hereinafter be
   written as:
    -- mutable    (mutable t)
    -- immutable  t
    -- undecided  (maybe t)

2. Every new binding is initially given a (maybe 'a) type, except for:
      ty_fnarg, ty_letgather, ty_typeclass, ty_tyfn.
   Local bindings that are observed to be used in a set! context (that
      is, are mutated) are given a ty_mutable wrapper.

3. Since:
    - when the use writes 'a, he means any type whether mutable or
      immutable, and 
    - we do not have an immutable type qualifier,
   type variables can never appear without either a maybe or a mutable
   wrapper. 

4. All type expressions (except in the case of a type variable) are
   stand for their immutable versions, so, they are given a type
   without any wrapper.
 
5. Unification rules:
   switch (t1->kind, t2->kind) {
     case (k, k):
         OK; Unify components/args.

    case (ty_tvar,  ty_maybe):
    case (ty_maybe, ty_tvar):
         assert(false);

     case (ty_mutable, ty_maybe):
     case (k,          ty_maybe):
         OK; Unify components/args.
         if(errFree) MKLINK(t2-->t1);

     case (ty_maybe, ty_mutable):
     case (ty_maybe, k):
         OK; Unify components/args.
         if(errFree) MKLINK(t1-->t2);
 
     case (ty_tvar, k):
         OK; MKLINK(t1-->t2);

     case (k, ty_tvar):
         OK; MKLINK(t2-->t1);
    }

6. Copy compatibility: In order to ensure that top-level mutability
   mismatch is OK across copy boundaries, unification must be done on
   a shallow copy of the candidate type with undecided mutability
   status (at top level).

   For example, 
   (define p #t)

   let lhsType = typeof(p)
       rhsType = typfOfCopy(#t)
       unify(lhsType, rhsType)
   where
      typeof(x) = obvious type
      typeOfCopy(x) = (maybe core(typeof(x)))
      core(x) = x without maybe/mutable wrapper.

  This rule must be applied in the case of
      - At argument positions of: 
          -- all applications function/constructor applications
          -- all expressions except:
              LHS of set!, deref, dup, array-nth, vector-nth, select.

       (ex:  if, cond, switch, try-catch, and, or, not, array, 
             vector, make-vector, make-vector, apply, 
             ucon_apply, struct_apply, etc). 

      - bindings let/letrec/letStar/define     

  This kind of compatibility shall hereby be called copy-compatibility.

7. We could, in principle provide the copy-compatibility at the return
   position of an application as well. However, as an explicit desgn
   choice, the return value is treated as exactly compatible. 

   Otherwise, functions like: (define (id x) x) will no longer return
   precisely what they accept. Of course, this can be forced by means
   of an explicit annotation *at every use of id*, the definition
   itself has no control over the top-level mutability of the return
   type. But, we need the annotation in the "normal" case, and writing
   an annotation at every use case is combersome. 

   Anot
