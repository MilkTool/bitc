//////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2010, The EROS Group, LLC
// All rights reserved.
//
// Test case contributed by Matt Rice, 10/28/2010
// 
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
//   - Redistributions of source code must contain the above 
//     copyright notice, this list of conditions, and the following
//     disclaimer. 
//
//   - Redistributions in binary form must reproduce the above
//     copyright notice, this list of conditions, and the following
//     disclaimer in the documentation and/or other materials 
//     provided with the distribution.
//
//   - Neither the names of the copyright holders nor the names of any
//     of any contributors may be used to endorse or promote products
//     derived from this software without specific prior written
//     permission. 
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////

bitc version 0.11

import bitc.main as main
provide bitc.main main


boxed struct doubly_list {
  val: int32
  next: mutable nullable(doubly_list)
  prev: mutable nullable(doubly_list)
}


def main.main(argv: string[])
in
  // various test cases which are all fairly similar.
  let head = doubly_list(0:int32, null, null)
  in let tail = head  // R&T'ing errors from here down if next/prev aren't mutable.
     in let foo = doubly_list(1:int32, null, null)
        in let bar = not_null(foo)
           in let bah = doubly_list(2:int32, bar, null)
              in let burn = doubly_list(3:int32, not_null(foo), null)
                 in let barn = doubly_list(4:int32, not_null(doubly_list(5:int32, null, null)), null)
                    in
                      foo.next := bar // R&T'ing errors begin here if next/prev are mutable
                      ()
  0:int32
