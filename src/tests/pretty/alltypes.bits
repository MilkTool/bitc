//////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2010, Jonathan S. Shapiro
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
//   - Redistributions of source code must contain the above 
//     copyright notice, this list of conditions, and the following
//     disclaimer. 
//
//   - Redistributions in binary form must reproduce the above
//     copyright notice, this list of conditions, and the following
//     disclaimer in the documentation and/or other materials 
//     provided with the distribution.
//
//   - Neither the names of the copyright holders nor the names of any
//     of any contributors may be used to endorse or promote products
//     derived from this software without specific prior written
//     permission. 
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////

bitc version 0.11

// Module with an instance of every sort of type shape allowed by the
// grammar, for testing the pretty printer.
module alltypes_test is {
  import bitc.list as lst;

  // Test all the primary types, plus CPAIR:
  def basic : ( int8,
                int16,
                int32,
                int64,
                uint8,
                uint16,
                uint32,
                uint64,
                word,
                (),
                float,
                double,
                bool);

  boxed struct S is {
    i : int32
    f : float
  };

  boxed struct Sapp('a)
    forall Eq('a)
  is {
    i : int32
    f : float
  };

  def primaries : (  (int8),    /* parenthesis wrapping */
                     
                     // Expedient syntaxes:
                     boxed(int32),
                     array(int32, 5),
                     vector(int32),
                     S,         /* useident */
                     Sapp(int32) ); /* type application */

  def shallowperm : ( mutable int32,
                      const int32 );

  def postfix : ( int32 reference,      /* postfix */
                  int32[5],       /* array */
                  int32[]);       /* vector */

  def prefix : ( unboxed(boxed(S)),   /* prefix */
                 unboxed(int32 reference)); /* test of precedence */

  def fntype : ( fn () -> (),      /* no args */
                 fn (int32) -> bool, /* one arg */
                 fn (int32,char) -> bool ); /* multiple arg */

  def RefArgTypes : fn (ByRef int32, ArrayRef int32) -> bool
}
