;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Copyright (C) 2010, Jonathan S. Shapiro
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;   - Redistributions of source code must contain the above 
;;     copyright notice, this list of conditions, and the following
;;     disclaimer. 
;;
;;   - Redistributions in binary form must reproduce the above
;;     copyright notice, this list of conditions, and the following
;;     disclaimer in the documentation and/or other materials 
;;     provided with the distribution.
;;
;;   - Neither the names of the copyright holders nor the names of any
;;     of any contributors may be used to endorse or promote products
;;     derived from this software without specific prior written
;;     permission. 
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;; A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;; OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
;; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

bitc version 0.11
import bitc.main as main
provide bitc.main main

trait arith('a, 'b, 'c) 
  tyfn ('a, 'b) -> 'c {
  `++: fn ('a, 'b) -> 'c
  `--: fn ('a, 'b) -> 'c
}

instance arith(int32, int32, int32) {
  `++ = `+
  `-- = `-
}

exception LengthError

def list-sum(x, y) =
  switch (x) { 
  case e1 as nil in
    switch (y) {
      case e2 as nil in nil
      case e2 as cons in throw LengthError
    }
  case e1 as cons in
    switch (y) {
      case e2 as nil in throw LengthError
      case e2 as cons in cons(e1.car + e2.car,
                              list-sum(e1.cdr, e2.cdr))
    }
  }

def list-dif(x, y) =
  switch (x) {
  case e1 as nil in
    switch (y) {
      case e2 as nil in nil
      case e2 as cons in throw LengthError
    }
  case e1 as cons in
    switch (y) {
      case e2 as nil in throw LengthError
      case e2 as cons in cons(e1.car - e2.car,
                              list-sum(e1.cdr, e2.cdr))
    }
  
  }

//(defthm list-sum-throws-on-length-mismatch
//  (implies (not `(equal (length ,l1) (length ,l2)))
//           `(try (begin (list-sum ,l1 ,l2) #f)
//		 (catch id (otherwise #t)))))
//
//(defthm list-sum-valid-on-length-match
//  (implies `(equal (length ,l1) (length ,l2)))
//           `(try (begin (list-sum ,l1 ,l2) #t)
//		 (catch id (otherwise #f))))
  
// should not work
//(definstance (arith (list 'a) (list 'b) (list 'c))
// lp lm)

instance arith(list('a), list('b), list('a)) {
  `++ = list-sum
  `-- = list-dif
}

// Should not work
//(definstance (arith int32 int32 int64)
//  + -)

instance arith(int64, int64, int64) {
  `++ = `+
  `-- = `-
}

def f(x, y) = `++(x, y);

def g(x:int32, y) = `++(x, y);

def h(x:int32, y:int32) = `++(x, y);

// No problem yet -- requires arith trait IFF instantiated
def ijk(x:bool, y) = `++(x, y);

// should not work
// def xyz(x:int32, y:int64) `++(x, y)
// def lmn(x y:bool) ijk(x, y)

def main.main(argvec:string[]) = {
  `++(cons(0:int32, nil), cons(0:int32, nil))
  `++(0:int32, 1:int32)
   0
}:int32
