//////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2006, Johns Hopkins University.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
//   - Redistributions of source code must contain the above 
//     copyright notice, this list of conditions, and the following
//     disclaimer. 
//
//   - Redistributions in binary form must reproduce the above
//     copyright notice, this list of conditions, and the following
//     disclaimer in the documentation and/or other materials 
//     provided with the distribution.
//
//   - Neither the names of the copyright holders nor the names of any
//     of any contributors may be used to endorse or promote products
//     derived from this software without specific prior written
//     permission. 
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////

bitc version 0.11
import bitc.main as main
provide bitc.main main

trait EQL('a)
is === : fn('a, 'a) -> bool

trait ORD('a)
  where EQL('a)
is <<== : fn('a,'a) -> bool

//(instance (EQL 'a) ==)
instance EQL(bool) 
is === = ==

instance EQL(int32)
is === = ==

instance ORD(int32)
is <<== = <=

//(instance (ORD int64) (lambda (x y) (<= x y)))
 

(def P ===)
(def (T a b) (and (<<== a b) (=== a b)))
(def (U a) (<<== a a))
//(def R (P 123:int32 456))

// Should not work
//(def RR (P 123:int64 456))

// Should not work
//(instance (ORD int64) <=)
//(def RPQ (<<== 123:int64 456)) 

instance Eq(list('a))
is _==_ = lambda (x, y) true
   _!=_ = lambda (x, y) false

instance EQL(list('a))
is === = ==

(def (f x:(list 'a)) (=== x x))

(def main.main:(fn (vector string) -> int32)
  (lambda (argvec)
    (=== 10:int32 20)
    (=== true false)
    (=== nil nil)
    (P true false) 0))

