;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Copyright (C) 2006, Johns Hopkins University.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;   - Redistributions of source code must contain the above 
;;     copyright notice, this list of conditions, and the following
;;     disclaimer. 
;;
;;   - Redistributions in binary form must reproduce the above
;;     copyright notice, this list of conditions, and the following
;;     disclaimer in the documentation and/or other materials 
;;     provided with the distribution.
;;
;;   - Neither the names of the copyright holders nor the names of any
;;     of any contributors may be used to endorse or promote products
;;     derived from this software without specific prior written
;;     permission. 
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;; A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;; OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
;; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bitc-version "0.10")
(provide main bitc.main)

(deftypeclass (EQL 'a)
  ===: (fn ('a 'a) bool)
  )

(deftypeclass (forall ((EQL 'a)) (ORD 'a))  
  <<==: (fn ('a 'a) bool)
  )

;(definstance (EQL 'a) ==)
(definstance (EQL bool) ==)
(definstance (EQL int32) ==)
(definstance (ORD int32) <=)
;(definstance (ORD int64) (lambda (x y) (<= x y)))
 

(define P ===)
(define (T a b) (and (<<== a b) (=== a b)))
(define (U a) (<<== a a))
;(define R (P (the int32 123) 456))

;; Should not work
;;(define RR (P (the int64 123) 456))

;; Should not work
;;(definstance (ORD int64) <=)
;;(define RPQ (<<== (the int64 123) 456)) 

(definstance (Eq (list 'a)) 
  (lambda (x y) #t)
  (lambda (x y) #f))

(definstance (EQL (list 'a)) ==)
(define (f x:(list 'a)) (=== x x))

(define main.main:(fn ((vector string)) int32)
  (lambda (argvec)
    (=== (the int32 10) 20)
    (=== #t #f)
    (=== nil nil)
    (P #t #f) 0))

