//////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2006, Johns Hopkins University.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
//   - Redistributions of source code must contain the above 
//     copyright notice, this list of conditions, and the following
//     disclaimer. 
//
//   - Redistributions in binary form must reproduce the above
//     copyright notice, this list of conditions, and the following
//     disclaimer in the documentation and/or other materials 
//     provided with the distribution.
//
//   - Neither the names of the copyright holders nor the names of any
//     of any contributors may be used to endorse or promote products
//     derived from this software without specific prior written
//     permission. 
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////

bitc version 0.11
import bitc.stdio as stdio
import bitc.stdlib as stdlib
import crypt.sha1 as sha1
import bitc.main as main
provide bitc.main main


def TS(str, ts)
in
  stdio.write_string(stdio.stdout, str)
  stdio.write_int(stdio.stdout, ts, 10)  
  stdio.write_char(stdio.stdout, '\linefeed')

def id(x) = convert(x)

def main.main(argvec: string[])
in
  def start:mutable uint64 = 0
  def stop:mutable uint64 = 0
  // def start = stdlib.getTimeStamp()

  def sha = sha1.sha1Context(
              array(0, 0, 0, 0, 0), 0, 0, 
              array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    0, 0, 0, 0), 0, false, sha1.sha_Success)

  def digest:mutable uint8[20] =
    array(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)

  def len:word = convert(stdlib.atoi(argvec[2]))
  // def stop = stdlib.getTimeStamp() 
  // TS("Initialization: ", stop - start)
    
  // start := stdlib.getTimeStamp()
  def iStream = stdio.open(argvec[1], "r")
  def input:mutable uint8[] =
    MakeVector(convert(len), lambda(i) {
                               if not(stdio.isEOF(iStream))
                               then stdio.read_byte(iStream)
                               else 0 })                                    
  //(loop ((i 0 (+ i 1)))
  //    ((>= i len) ())
  //    (set! input[i] 
  //	    (if (not (stdio.isEOF iStream))
  //		(stdio.read_byte iStream) 0)))  
  stdio.close(iStream)

  // stop := stdlib.getTimeStamp()
  // TS("Input: ", stop - start)
    
  def examine(res, mesg) =
    switch x = res
    case sha1.sha_Success in ()
    otherwise
      stdio.write_string(stdio.stdout, "Failed ")
      stdio.write_string(stdio.stdout, mesg)
      stdio.write_string(stdio.stdout, ": ")
      stdio.write_string(stdio.stdout, sha1.shaResultAsString(res))
      stdio.write_char(stdio.stdout, '\linefeed')
    
  start := stdlib.getTimeStamp()

  loop i:word = 0 then i + 1
  until i >= 500
  in        
    examine(sha1.sha1Reset(sha), "Reset")
    examine(sha1.sha1Input(sha, input), "Input")
    examine(sha1.sha1Result(sha, digest), "Result")

  stop := stdlib.getTimeStamp()
  // TS("SHA1: ", stop - start)
    
  // start := stdlib.getTimeStamp()
  loop i = 0 then i + 1
  until i >= 20
  in
    when i > 0
    do
      stdio.write_char(stdio.stdout, '\space')
    stdio.write_int(stdio.stdout, digest[i], 16)
  stdio.write_char(stdio.stdout, '\linefeed')
    
  // stop := stdlib.getTimeStamp()
  // TS("Output: ", stop - start)
  0:int32
  
  
