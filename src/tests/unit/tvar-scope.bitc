//////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2006, Johns Hopkins University.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
//   - Redistributions of source code must contain the above 
//     copyright notice, this list of conditions, and the following
//     disclaimer. 
//
//   - Redistributions in binary form must reproduce the above
//     copyright notice, this list of conditions, and the following
//     disclaimer in the documentation and/or other materials 
//     provided with the distribution.
//
//   - Neither the names of the copyright holders nor the names of any
//     of any contributors may be used to endorse or promote products
//     derived from this software without specific prior written
//     permission. 
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////

bitc version 0.11
import bitc.main as main
provide bitc.main main

def i0 = 0:int32

//(def p (if true:'a 10:int32 20))

def p1 = let l:'a = lambda(x) { x }
         in l(true)
            l(i0)

def p2 = let l = lambda(x:'a) { x }
         in l(true)
            l(())

def p3 = let l = lambda(x) { x }
         in (l:'a)(true)
            l(i0)

// MUST NOT WORK
//(def p4 (let ((l:'a (lambda (x) x))) (l:'a true) (l i0) ))

// MUST NOT WORK
//(def p5 (let ((m:'a (lambda (x) x)))
//	     (let ((n:'a (lambda (x) x))) true)
//	     (m true) (m i0) ))


// FIX: Polyinstantiator isue with tvar scoping
//(def p6 (let ((m:'a (let ((n:'a (lambda (x) x))) n)))
//	     (m true) (m i0) ))

import bitc.main as main
provide bitc.main main

def main.main(argvec: string[])
in
  0:int32  
