;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Copyright (C) 2006, Johns Hopkins University.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;   - Redistributions of source code must contain the above 
;;     copyright notice, this list of conditions, and the following
;;     disclaimer. 
;;
;;   - Redistributions in binary form must reproduce the above
;;     copyright notice, this list of conditions, and the following
;;     disclaimer in the documentation and/or other materials 
;;     provided with the distribution.
;;
;;   - Neither the names of the copyright holders nor the names of any
;;     of any contributors may be used to endorse or promote products
;;     derived from this software without specific prior written
;;     permission. 
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;; A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;; OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
;; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bitc-version "0.10")

;; Capture different cases of things affected by mutability. We should
;; dump the types of these expressions and see if they are as expected
;; as the type inference of mutability is changes or readjusted.

(import bitc.list as ls)

(define (id x) x)

(define m1:(mutable int32) 1)
(define m2:(mutable int32) 2)

(define v1 (id m1))
(define v1q:(mutable int32) (id m1))

(define v2 (cons m1 nil))
(define v2q:(list (mutable int32)) (cons m1 nil))
(define v2q2:(mutable (list (mutable int32))) (cons m1 nil))

(define v31 (if #t m1 2))
(define v32 (if #t m1 m2))
(define v33 (if #t m1 2:int32))
(define v33q:(mutable int32) (if #t m1 2:int32))

(define (l2v lst)
  (make-vector (length lst) 
		(lambda (n) (ls.list-nth lst n))))
(define l2vq:(fn (list 'a) -> (vector 'a))
  (lambda (lst)
    (make-vector (length lst) 
		  (lambda (n) (ls.list-nth lst n)))))


(define (lvm lst:(list (mutable char)))
  (l2v lst))
(define (lvmq lst:(list (mutable char)))
  (l2vq lst))

(import bitc.main as main)
(provide bitc.main main)
(define main.main:(fn (vector string) -> int32)
  (lambda (argvec) 0))

