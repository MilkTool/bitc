;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Copyright (C) 2006, Johns Hopkins University.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;   - Redistributions of source code must contain the above 
;;     copyright notice, this list of conditions, and the following
;;     disclaimer. 
;;
;;   - Redistributions in binary form must reproduce the above
;;     copyright notice, this list of conditions, and the following
;;     disclaimer in the documentation and/or other materials 
;;     provided with the distribution.
;;
;;   - Neither the names of the copyright holders nor the names of any
;;     of any contributors may be used to endorse or promote products
;;     derived from this software without specific prior written
;;     permission. 
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;; A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;; OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
;; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bitc version 0.10)
(import bitc.stdio as stdio)
(import bitc.stdlib as stdlib)
(import bitc.main as main)
(provide bitc.main main)


(define (TS str ts)
  (stdio.write-string stdio.stdout str)
  (stdio.write-int stdio.stdout ts 10)  
  (stdio.write-char stdio.stdout #\linefeed))  

(define (zero x) 0)

(define main.main:(fn (vector string) -> int32)
  (lambda (argvec)
    (define len:word 5000)
    (define first (stdlib.getTimeStamp))
    (define start (stdlib.getTimeStamp)) 
    (define stop (stdlib.getTimeStamp)) 
  ;(TS "Time Stamping: " (- stop start))
    
    (define vec:(vector (mutable uint8))
      (make-vector len zero))
    
    (set! start (stdlib.getTimeStamp))
    (stdio.write-string stdio.stdout "This is a test string\n")
    (set! stop (stdlib.getTimeStamp)) 
  ;(TS "Print to stdout: " (- stop start))
    
    (set! start (stdlib.getTimeStamp))
    (define iStream (stdio.open (vector-nth argvec 1) "r"))
    (set! stop (stdlib.getTimeStamp)) 
  ;(TS "Open Read Stream: " (- stop start))
    
    (set! start (stdlib.getTimeStamp))
    (define oStream (stdio.open "BUILD/_WRITE_" "w"))
    (set! stop (stdlib.getTimeStamp)) 
  ;(TS "Open Write Stream: " (- stop start))
    
    (set! start (stdlib.getTimeStamp))
    (define temp (stdio.read-byte iStream))
    (set! stop (stdlib.getTimeStamp)) 
  ;(TS "Read 1 Byte from file: " (- stop start))
    
    (set! start (stdlib.getTimeStamp))
    (do ((i 0 (+ i 1)))
	((>= i len) ())
	(set! (vector-nth vec i) (stdio.read-byte iStream)))  
    (set! stop (stdlib.getTimeStamp)) 
  ;(TS "Input from File: " (- stop start))
    
    (set! start (stdlib.getTimeStamp))
    (do ((i 0 (+ i 1)))
	((>= i len) ())
	(stdio.write-byte stdio.stdout (vector-nth vec i)))  
    (set! stop (stdlib.getTimeStamp)) 
  ;(TS "Write to stdout: " (- stop start))
    
    (set! start (stdlib.getTimeStamp))
    (do ((i 0 (+ i 1)))
	((>= i len) ())
	(set!  (vector-nth vec i)
	       (if (not (stdio.eof? iStream))
		   (stdio.read-byte iStream) 0)))  
    (set! stop (stdlib.getTimeStamp)) 
  ;(TS "Checked Input From file: " (- stop start))
    
    (set! start (stdlib.getTimeStamp))
    (do ((i 0 (+ i 1)))
	((>= i len) ())
	(stdio.write-byte oStream (vector-nth vec i)))  
    (set! stop (stdlib.getTimeStamp)) 
  ;(TS "Write to file: " (- stop start))
    
    
    (set! start (stdlib.getTimeStamp))
    (stdio.close iStream)
    (set! stop (stdlib.getTimeStamp)) 
  ;(TS "Close iStream: " (- stop start))
    
    (set! start (stdlib.getTimeStamp))
    (stdio.close oStream)
    (set! stop (stdlib.getTimeStamp)) 
  ;(TS "Close oStream: " (- stop start))
    
    (set! stop (stdlib.getTimeStamp)) 
  ;(TS "Total: " (- stop first))
    
    0))
  
  
