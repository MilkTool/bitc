//////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2006, Johns Hopkins University.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
//   - Redistributions of source code must contain the above 
//     copyright notice, this list of conditions, and the following
//     disclaimer. 
//
//   - Redistributions in binary form must reproduce the above
//     copyright notice, this list of conditions, and the following
//     disclaimer in the documentation and/or other materials 
//     provided with the distribution.
//
//   - Neither the names of the copyright holders nor the names of any
//     of any contributors may be used to endorse or promote products
//     derived from this software without specific prior written
//     permission. 
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////

bitc version 0.11

// Test for mutability inference and hint propagation.
// Inference is actually doing the right thing here. 
// The type for f is mutable and there are no generalizable ftvs at
// the letrec. But at the top level expression `p', the copy of f need
// not be mutable and the type of p is generalized.

(def p
 (letrec ((f (lambda (x) x))
	   (g (lambda (x) (vector f)))
	   (h (lambda (x) f:(mutable 'a))))

   (set! f (lambda (y) y))

   // Use this if you want to see the 
   // Value restricted types.
   // ((f, g), h)
   )
 )

import bitc.main as main
provide bitc.main main
(def main.main:(fn (vector string) -> int32)
  (lambda (argvec) 0))

