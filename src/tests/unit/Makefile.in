##########################################################################
#
#  Copyright (C) 2008, Johns Hopkins University.
#  All rights reserved.
#
#  Redistribution and use in source and binary forms, with or
#  without modification, are permitted provided that the following
#  conditions are met:
#
#    - Redistributions of source code must contain the above 
#      copyright notice, this list of conditions, and the following
#      disclaimer. 
#
#    - Redistributions in binary form must reproduce the above
#      copyright notice, this list of conditions, and the following
#      disclaimer in the documentation and/or other materials 
#      provided with the distribution.
#
#    - Neither the names of the copyright holders nor the names of any
#      of any contributors may be used to endorse or promote products
#      derived from this software without specific prior written
#      permission. 
#
#  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
#  "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
#  LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
#  A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
#  OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#  SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#  LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
#  DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
#  THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
#  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
#  OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
##########################################################################

# @configure_input@

SHELL = /bin/sh

#### Start of system configuration section. ####

srcdir = @srcdir@
top_srcdir = @top_srcdir@

CXX = @CXX@
CC = @CC@
AR = ar
VERSION=@VERSION@
BUILD=@BUILD@
RANLIB=@RANLIB@
INSTALL = @INSTALL@
INSTALL_DATA = @INSTALL_DATA@
INSTALL_PROGRAM = @INSTALL_PROGRAM@
CFLAGS = @CFLAGS@
CXXFLAGS = @CXXFLAGS@
LDFLAGS = @LDFLAGS@

bindir = @bindir@
libdir = @libdir@
includedir = @includedir@
datadir = @datadir@
datarootdir = @datarootdir@

MAKEINFO = makeinfo
TEXI2DVI = texi2dvi

# shap: I have seen autoconf get this consistently wrong, which
# is why the following obscure test is present. Surely there must
# be a better way? I don't like this solution either, as it does not
# work robustly when the user messes with --prefix...

# Where to put the Info files
shareinfodir=$(findstring $(datadir)/info,$(wildcard $(datadir)/*))
infodir = $(if $(shareinfodir),$(shareinfodir),@infodir@)

# Where to put the manual pages.
sharemandir=$(findstring $(datadir)/man,$(wildcard $(datadir)/*))
mandir = $(if $(sharemandir),$(sharemandir),@mandir@)

mkinstalldirs = $(top_srcdir)/mkinstalldirs

#### End of system configuration section. ####

CLEANLIST=*.c *.o core.*

GC_INC=
GC_LIBDIR=
GC_LIB=-lgc

LIBBITC_SRC=@top_srcdir@/libbitc
LIBBITC_C_RUNTIME=@top_srcdir@/libbitc/BUILD/libbitc.a
LIBBITC_NO_GC=@top_srcdir@/libbitc/BUILD/libbitc-no-gc.a

BITCC_SRC=@top_srcdir@/compiler

INC+=$(GC_INC)
# If a test case is temporarily broken, add it to BROKEN_SOURCE via
#  make BROKEN_SOURCE="bad-test.bitc bad-test2.bitc"
BROKEN_SOURCE=
SOURCE= $(filter-out $(BROKEN_SOURCE),$(wildcard *.bitc))
TARGETS=$(SOURCE:%.bitc=BUILD/%)
BITCC=@top_srcdir@/compiler/BUILD/bitcc
RUN_BITCC=$(BITCC) -O -I $(LIBBITC_SRC) --nostdlib

RUN=a.out
GCCWARN+=-Wno-unused
#LIBS=$(GC_LIBDIR) $(LIBBITC) $(GC_LIB)

CFLAGS+=-g -I$(PWD)/@top_srcdir@/libbitc
c-source: $(SOURCE:%.bitc=%.c)
objects: $(OBJECTS)

.PRECIOUS: $(SOURCE:%.bitc=%)

all:  $(TARGETS)

# Strictly speaking, it is sufficient to depend on the individual 
# test cases here, but that has the unfortunate consequence that the
# test executions get interleaved with the compiles. By adding "all"
# as a precondition, we ensure that the compile phase happens first
# so that all of the results are reported together.
test: all $(SOURCE:%.bitc=%.test)

install: all test

comp:
	make run > comp.stdout 2> comp.stderr
	diff comp.stdout comp-out
	diff comp.stderr comp-err
	rm -f comp.stdout comp.stderr

EXPECT_STATUS=0
EXPECT_OUTPUT=/dev/null
USE_INPUT=/dev/null
ARGS=""
TESTOPTS=-v

BUILD:
	mkdir -p BUILD

# Always check that these are up to date.
.PHONY: $(BITCC) $(LIBBITC_C_RUNTIME) $(LIBBITC_NO_GC)


$(LIBBITC_C_RUNTIME): $(BITCC)
	make -C $(LIBBITC_SRC) BUILD/libbitc.a

$(LIBBITC_NO_GC): $(BITCC)
	make -C $(LIBBITC_SRC) BUILD/libbitc-no-gc.a

$(BITCC):
	make -C $(BITCC_SRC) BUILD/bitcc

%.test: BUILD/% | BUILD
	@../testit.sh ${TESTOPTS} -s $(EXPECT_STATUS) -o $(EXPECT_OUTPUT) -i $(USE_INPUT) "./$< $(ARGS)"

clconv1.test: EXPECT_STATUS=1
closure.test: EXPECT_STATUS=3
AppLoc.test: EXPECT_STATUS=3
newException.test: EXPECT_STATUS=1
newException.test: EXPECT_OUTPUT=newException.stdout
VecBoundsError.test: EXPECT_STATUS=1
VecBoundsError.test: EXPECT_OUTPUT=VecBoundsError.stdout
UncaughtException.test: EXPECT_STATUS=1
UncaughtException.test: EXPECT_OUTPUT=UncaughtException.stdout
wchar.test: EXPECT_OUTPUT=wchar.stdout
odd_even_letrec.test: EXPECT_STATUS=139
Echo_Args.test: EXPECT_OUTPUT=Echo_Args.stdout
echo-char.test: USE_INPUT=echo-char.stdin
echo-char.test: EXPECT_OUTPUT=echo-char.stdout
hello.test: EXPECT_OUTPUT=hello.stdout
Fact-Rec.test: EXPECT_STATUS=120
Fact-Loop.test: EXPECT_STATUS=120
Fact-Mut.test: EXPECT_STATUS=120
intout.test: EXPECT_OUTPUT=intout.stdout
io-time.test: ARGS=file.input
io-time.test: EXPECT_OUTPUT=io-time.stdout
sha1-file.test: ARGS="file.input 128028"
sha1-file.test: EXPECT_OUTPUT=sha1-file.stdout
sha1-test.test: EXPECT_OUTPUT=sha1-test.stdout 
twomodule.test: EXPECT_OUTPUT=twomodule.stdout 

BUILD/%: %.bitc $(BITCC) $(LIBBITC_C_RUNTIME) | BUILD
	$(RUN_BITCC) $(BITOPT) $(INC) -v -o $@  $< $(LIBBITC_C_RUNTIME)

# .PRECIOUS: $(SOURCE:%.bitc=%.c)

LIBBITC_SHA1_SRC=@top_srcdir@/libbitc/crypt/sha1.bits

BUILD/sha1-test: sha1-test.bitc  $(BITCC) $(LIBBITC_SHA1_SRC)
	$(RUN_BITCC) $(BITOPT) $(INC) -v -o $@  $< $(LIBBITC_SHA1_SRC) $(LIBBITC_C_RUNTIME)

BUILD/sha1-file: sha1-file.bitc  $(BITCC) $(LIBBITC_SHA1_SRC)
	$(RUN_BITCC) $(BITOPT) $(INC) -v -o $@  $< $(LIBBITC_SHA1_SRC) $(LIBBITC_C_RUNTIME)

#BUILD/%.c: %.bitc  $(BITCC)
#	$(RUN_BITCC) $(BITCOPT) $(INC) --emit c -o $@ $<

DEPFILES=$(wildcard BUILD/*.m)

clean:
	-rm -rf BUILD

DEPFILES=$(wildcard BUILD/*.m)
-include $(DEPFILES)
