//////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2009, Johns Hopkins University.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
//   - Redistributions of source code must contain the above 
//     copyright notice, this list of conditions, and the following
//     disclaimer. 
//
//   - Redistributions in binary form must reproduce the above
//     copyright notice, this list of conditions, and the following
//     disclaimer in the documentation and/or other materials 
//     provided with the distribution.
//
//   - Neither the names of the copyright holders nor the names of any
//     of any contributors may be used to endorse or promote products
//     derived from this software without specific prior written
//     permission. 
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////

bitc version 0.11
import bitc.main as main
provide bitc.main main

unboxed struct Obj
is inc: fn () -> ()
   odd: fn ()-> bool

def hasOdd(oList)
in
  switch x = oList
  case nil in false
  case cons in x.car.odd() or hasOdd(x.cdr)

def main.main(argvec : string[])
in
  // An object with encapsulated integer state
  def obji = {
    def i = 10:int32
    def inc_i() = i := i + 1
    def odd_i() = (i % 2) != 0
    Obj(inc_i, odd_i)
  }
   
  // An object with encapsulated float state
  def objf = {
    def f = 10.0:float
    def inc_f() = f := f + 1.0
    def odd_f() = false         // :)
    Obj(inc_f, odd_f)
  }   

  // An object with encapsulated boolean state
  def objb = {
    def b = true
    def inc_b() = b := true       // :)
    def odd_b() = true          // :)
    Obj(inc_b, odd_b)
  }

  // All objects have the same type Obj, no way to recover the inner
  // hidden state.
  def objList = cons(obji, cons(objf, cons(objb, nil)))
    
  // Operation on list of objects
  if hasOdd(objList) then 0:int32 else 1:int32
