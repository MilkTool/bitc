;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Copyright (C) 2006, Johns Hopkins University.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;   - Redistributions of source code must contain the above 
;;     copyright notice, this list of conditions, and the following
;;     disclaimer. 
;;
;;   - Redistributions in binary form must reproduce the above
;;     copyright notice, this list of conditions, and the following
;;     disclaimer in the documentation and/or other materials 
;;     provided with the distribution.
;;
;;   - Neither the names of the copyright holders nor the names of any
;;     of any contributors may be used to endorse or promote products
;;     derived from this software without specific prior written
;;     permission. 
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;; A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;; OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
;; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bitc-version "0.10")

;(define (id x) x)
;(define i0 (the int32 0))
;(define i1 (the int32 1))
;(define i2 (the int32 2))


;(define p
; (letrec ((f (lambda (x) x))
;	   (g (lambda (x) (vector f)))
;	   (h (lambda (x) f:(mutable 'a))))
;   ((f, g), h)))


;(define abc:(forall ((RefTypes int32)) int32) 
;  10)

;(define abc:(forall ((CopyCompat 'a 'b)) (fn ('a 'b) ())) 
;  (lambda (x:'a y:'b) ()))

;(define fgh:(forall ((CopyCompat (ref 'a) (ref 'a))) (fn ('a 'b) ())) 
;  (lambda (x:'a y:'b) ()))

;(define dupize1 (lambda (x) (dup x)))
;(define dupize2:(forall ((CopyCompat 'a 'b))
;			(fn ('a) (ref 'b)))
;  (lambda (x) (dup x)))

;(provide main bitc.main)
;(define (main.main argv:(vector string))  
;  (abc (10, 20):(pair int32 (mutable int32))
;       (10, 20):(pair int32 int32) )
;  0:int32)

;(define p 1)

;(define r:(mutable 'a) 25)

;(define mb:(mutable 'a) #t)
;(define q (mb, (vector p)))

(define p6 (let ((m:'a (let ((n:'a (lambda (x) x))) n)))
	     (m #t) ))

(define p2 (let ((l:'a (lambda (x) x):'a)) (l #t) (l ())))


(provide main bitc.main)
(define (main.main argv:(vector string))  
  0:int32)
