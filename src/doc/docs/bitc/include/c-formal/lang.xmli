<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE figure PUBLIC "-//EROS Group//DTD OSDoc XML V0.1//EN"
               "http://www.coyotos.org/OSDoc/DTD/osdoc-0.1.dtd" [
]>
  <sect1 id="language"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:btypes="http://www.bitc-lang.org/DTD/bitc/0.1/bitc-types.dtd">
  <title>The Language <btypes:TYPE><language/></btypes:TYPE> </title>
  <p>
    We limit our presentation to a core calculus of BitC called 
    <btypes:TYPE>
      <language/>
    </btypes:TYPE> in the interest of brevity. 
  </p>
  <btypes:TYPE>        
    <grammar>
      <bnf desc="Identifiers">
	<id/>
	<alternatives etc="yes">
	  <id name="y"/>
	  <id name="z"/>
	</alternatives>
      </bnf>
      <bnf desc="Booleans">
	<bVal/>
	<alternatives>
	  <true/>
	  <false/>
	</alternatives>
      </bnf>
      <bnf desc="Values">
	<aVal/>
	<alternatives>
	  <Unit/>
	  <bVal/>
	  <lambda>
	    <id/>
	    <aExpr/>
	  </lambda>
	  <Pair>
	    <aVal/>
	    <aVal/>
	  </Pair>
	  <hLoc/>
	</alternatives>
      </bnf>
      <bnf desc="Value Expr">
	<vExp/>
	<alternatives>
	  <aVal/>
	  <id/>
	  <sLoc/>
	</alternatives>
      </bnf>
      <bnf desc="Left Expr">
	<lExp/>
	<alternatives>
	  <id/>
	  <sLoc/>
	  <deref>
	    <hLoc/>
	  </deref>
	  <deref>
	    <aExpr/>
	  </deref>
	  <ith>
	    <lExp/>
	  </ith>
	</alternatives>
      </bnf>
      <bnf desc="Expressions">
	<aExpr/>
	<alternatives>
	  <vExp/>
	  <apply>
	    <aExpr/>
	    <aExpr/>
	  </apply>
	  <assign>
	    <lExp/>
	    <aExpr/>
	  </assign> 
	  <if>
	    <aExpr/>
	    <aExpr/>
	    <aExpr/>
	  </if>
	</alternatives>
      </bnf>
      <bnfc desc="">
	<alternatives>
	  <dup>
	    <aExpr/>
	  </dup>
	  <deref>
	    <aExpr/>
	  </deref>
	  <Pair>
	    <aExpr/>
	    <aExpr/>
	  </Pair>
	  <ith>
	    <aExpr/>
	  </ith>
	</alternatives>
      </bnfc>
      <bnfc desc="">
	<alternatives>
	  <let kind="x">
	    <id/>
	    <aExpr/>
	    <aExpr/>
	  </let>
	</alternatives>
      </bnfc>
      <bnf desc="Indices">
	<collection>
	  <ndx/>
	</collection>
	<alternatives>
	  <texttt content="1"/>
	  <texttt content="2"/>
	  <other>
	    <ndx/>
	  </other>
	</alternatives>
      </bnf>
      <bnf desc="Let-kinds">
	<lKind/>
	<alternatives>
	  <hole/>
	  <lKind k="var"/>
	  <lKind k="mono"/>
	  <lKind k="poly"/>
	</alternatives>
      </bnf>
      <bnf desc="Locations">
	<loc/>
	<alternatives>
	  <sLoc/>
	  <hLoc/>
	</alternatives>
      </bnf>
      <bnf desc="Stack Loc"> 
	<sLoc/>
	<alternatives etc="yes">
	  <sLoc num="1"/>
	  <sLoc num="2"/>
	</alternatives>
      </bnf>
      <bnf desc="Heap Loc">
	<hLoc/>
	<alternatives etc="yes">
	  <hLoc num="1"/>
	  <hLoc num="2"/>
	</alternatives>
      </bnf>
    </grammar>
  </btypes:TYPE>
  <p>
    The type 
    <btypes:TYPE>        
      <ref><type/></ref>
    </btypes:TYPE> represents a reference / pointer type. It does not
    entail mutability. The type 
    <btypes:TYPE>        
      <mutable><type/></mutable>
    </btypes:TYPE> represents a mutable type.
    All the above syntactic forms can be parenthesized without
    change in meaning. The let-kind ``-'' is a placeholder for the
    unkinded (input) <progident>let</progident> form.
    We define
    <btypes:TYPE>
      <eq>
	<other>
	  <texttt content="1"/>
	</other>
	<texttt content="2"/>
      </eq>
    </btypes:TYPE> and
    <btypes:TYPE>
      <eq>
	<other>
	  <texttt content="2"/>
	</other>
	<texttt content="1"/>
      </eq>
    </btypes:TYPE>.
  </p>
  </sect1>
