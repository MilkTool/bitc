<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE figure PUBLIC "-//EROS Group//DTD OSDoc XML V0.1//EN"
               "http://www.coyotos.org/OSDoc/DTD/osdoc-0.1.dtd" [
]>
  <sect1 id="opsem"
    xmlns:xi="http://www.w3.org/2001/XInclude"
    xmlns:btypes="http://www.bitc-lang.org/DTD/bitc/0.1/bitc-types.dtd">
  <title>Dynamic Semantics of <btypes:TYPE><language/></btypes:TYPE></title>
  <btypes:TYPE>        
    <grammar>
      <bnf desc="Stack">
	<stack/>
	<alternatives>
	  <Empty/>
	  <extend>
	    <stack/>
	    <mapping>
	      <sLoc/>
	      <aVal/>
	    </mapping>
	  </extend>
	</alternatives>
      </bnf>
      <bnf desc="Heap">
	<heap/>
	<alternatives>
	  <Empty/>
	  <extend>
	    <heap/>
	    <mapping>
	      <hLoc/>
	      <aVal/>
	    </mapping>
	  </extend>
	</alternatives>
      </bnf>
    </grammar>
  </btypes:TYPE>
  <p>
    The Operational semantics rules are shown in Figure&nbsp;<xref
      ref="dyn_sem_horz"/>.
    The system state is represented by the triple 
    <btypes:TYPE>
      <opState>
	<stack/>
	<heap/>
	<aExpr/>
      </opState>
    </btypes:TYPE>
    consisting of the stack
    <btypes:TYPE>
      <stack/>
    </btypes:TYPE>, the heap
    <btypes:TYPE>
      <heap/>
    </btypes:TYPE>, and the expression
    <btypes:TYPE>
      <aExpr/>
    </btypes:TYPE> to be
    evaluated. Evaluation itself is a two place relationship   
    <btypes:TYPE>
      <eval>
	<opState>
	  <stack/>
	  <heap/>
	  <aExpr/>
	</opState>
	<opState>
	  <stack dash="'"/>
	  <heap dash="'"/>
	  <aExpr dash="'"/>
	</opState>
      </eval>
    </btypes:TYPE>
    that denotes transformation in the system state due to a single
    step of execution.
    Figure&nbsp;<xref ref="dyn_sem_horz"/> shows the evaluation
    rules for our core language. We assume that the program is
    alpha-converted so that there are no name collisions due to
    inner bindings. Separate execution
    semantics are given for left and right execution (evaluation of
    expressions that appear on the LHS and RHS of an assignment 
    <btypes:TYPE>
      <assign>
	<aExpr num="l"/>
	<aExpr num="r"/>
      </assign>
    </btypes:TYPE>) denoted by 
    <btypes:TYPE><levalOp/></btypes:TYPE> and 
    <btypes:TYPE><evalOp/></btypes:TYPE> respectively. 
  </p>
  </sect1>
