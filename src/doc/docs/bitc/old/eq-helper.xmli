<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE floatingtable PUBLIC "-//EROS Group//DTD OSDoc XML V0.1//EN"
               "http://www.coyotos.org/OSDoc/DTD/osdoc-0.1.dtd" >
<figure id="eq_helper" fullwidth='yes' latex.placement="tbp">
  <font size="small">
    <btypes:TYPE
      xmlns:btypes="http://www.bitc-lang.org/DTD/bitc/0.1/bitc-types.dtd">
      <Hrules>
	<textbf content="Translations: "/>
	<grouping>
	  <leadsto>
	    <DBrac>
	      <op symbol="odot">
		<type num="1"/>
		<type num="2"/>
		<text content=" ... "/>
		<type num="n"/>	      
	      </op>
	    </DBrac>
	    <DBrac>
	      <collection>
		<op symbol="odot">
		  <type num="1"/>
		  <type num="2"/>
		</op>
		<text content=" ... "/>
		<op symbol="odot">
		  <type num="n-1"/>	      
		  <type num="n"/>
		</op>
	      </collection>
	    </DBrac>
	  </leadsto>
	  <space/>
 	  <textit content=" for any operator"/>
	  <space/>
	  <operator symbol="odot"/>
	</grouping>
	<leadsto>
	  <DBrac>
	    <eq>
	      <type num="1"/>
	      <type num="2"/>
	    </eq>
	  </DBrac>
	  <DBrac>
	    <collection>
	      <Tsub>
		<type num="1"/>
		<type num="2"/>
	      </Tsub>
	      <Tsub>
		<type num="2"/>
		<type num="1"/>
	      </Tsub>	      
	    </collection>
	  </DBrac>
	</leadsto>	
      </Hrules>
      <Hrules rowsep="4pt">
	<leadsto>
	  <DBrac>
	    <unf ac="yes">
	      <aCtset/>
	    </unf>
	  </DBrac>
	  <DBrac>
	    <collection>
	      <unf>
		<aCtset/>
	      </unf>
	      <pred name="acyclic">
		<aCtset/>
	      </pred>	      
	    </collection>
	  </DBrac>
	</leadsto>
	<leadsto>
	  <DBrac>
	    <unf cl="yes">
	      <aCtset/>
	    </unf>
	  </DBrac>
	  <DBrac>
	    <unf>
	      <pred name="TransClose">
		<aCtset/>
	      </pred>
	    </unf>
	  </DBrac>
	</leadsto>
      </Hrules>
      <Hrules>
	<grouping>
	  <eq>
	    <pred name="P">
	      <aCtset/>
	    </pred>
	    <OR>
	      <!-- Acyclic Check -->
	      <pred name="cyclic">
		<aCtset/>
	      </pred>
	      <!-- Individual cases handled -->	    
	      <Exists>
		<in>
		  <constraint/>
		  <aCtset/>
		</in>
	      </Exists>
	    </OR>
	  </eq>
	  <space/>
	  <textit content="such that"/>
	  <space/>
	  <notin>
	    <constraint/>
	    <unin>
	      <aCtset num="hdl"/>
	      <aCtset num="rem"/>
	    </unin>
	  </notin>
	  <space/>
	  <textit content="wherein, if: "/>
	  <space/>
	  <space/>
	  <!-- Immut() is deep immutability, while
	  minz() only guarantees shallow immutability -->
	  <pred name="Immut">
	    <type num="i"/>
	  </pred>
	  <text content=","/>
	  <space/>
	  <eq>
	    <type num="f"/>
	    <minz>
	      <type num="f"/>
	    </minz>
	  </eq>
	  <textit content=", and"/>
	  <space/>
	  <OR>
	    <eq>
	      <type num="m"/>
	      <maxz>
		<type num="m"/>
	      </maxz>
	    </eq>
	    <eq>
	      <type num="m"/>
	      <tvar name="alpha"/>
	    </eq>
	  </OR>	  
	  <textit content=","/>
	  <space/>
	  <textit content="then"/>
	</grouping>
      </Hrules>
      <Hrules>
	<eq>
	  <aCtset num="hdl"/>
	  <set>
	    <Tsub>
	      <type/>
	      <type/>
	    </Tsub>
	    <Tsub>
	      <mutable>
		<type/>
	      </mutable>
	      <type/>
	    </Tsub>
	    <eq>
	      <lKind k="var"/>
	      <lKind/>
	    </eq>
	    <Tsub>
	      <fn>
		<type num="a"/>
		<type num="r"/>
	      </fn>
	      <fn>
		<type num="a" dash="'"/>
		<type num="r" dash="'"/>
	      </fn>
	    </Tsub>
	    <Tsub>
	      <ref>
		<type/>
	      </ref>
	      <ref>
		<type dash="'"/>
	      </ref>
	    </Tsub>
	    <Tsub>
	      <mutable>
		<type/>
	      </mutable>
	      <mutable>
		<type dash="'"/>
	      </mutable>
	    </Tsub>
	    <Pcst>
	      <lKind k="mono"/>
	      <type/>
	      <type dash="'"/>
	    </Pcst>
	    <Pcst>
	      <lKind k="poly"/>
	      <type/>
	      <type num="i"/>
	    </Pcst>
	    <Pcst>
	      <lKind k="var"/>
	      <type/>
	      <type dash="'"/>
	    </Pcst>
	  </set>
	</eq>
      </Hrules>
      <Hrules>
	<eq>
	  <aCtset num="rem"/>
	  <set>
	    <Tsub>
	      <tvar name="alpha"/>
	      <type/>
	    </Tsub>
	    <Tsub>
	      <type/>
	      <tvar name="alpha"/>
	    </Tsub>
	    <Tsub>
	      <type/>
	      <floor>
		<type dash="'"/>
	      </floor>
	    </Tsub>
	    <Tsub>
	      <ceil>
		<type/>
	      </ceil>
	      <type dash="'"/>
	    </Tsub>
	    <Tsub>
	      <floor>
		<type/>
	      </floor>
	      <type num="f"/>
	    </Tsub>
	    <Tsub>
	      <type num="c"/>
	      <ceil>
		<type/>
	      </ceil>
	    </Tsub>
	  </set>
	</eq>
      </Hrules>	  
      <Hrules>
	<grouping>
	</grouping>
      </Hrules>
    </btypes:TYPE>
  </font>
  <caption>Equational Inference: Auxilary Definitions</caption>
</figure>
