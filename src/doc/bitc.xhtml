<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
   "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
    <title>The BitC Programming Language</title>
  </head>
  <body>
    <h1 class="title">The BitC Programming Language</h1>
    <p>
      BitC is a new systems programming language. It seeks to combine
      the flexibility, safety, and richness of Standard ML or Haskell with the
      low-level expressiveness of C.
    </p>
    <h2>Objectives</h2>
    <p>
      BitC is a programming language that tries to meet the following
      objectives:
    </p>
    <ul>
      <li>
	<p>Provide full support for fine-grain data structure
	  specifications, including hardware-defined data
	  structures. Representation requirements are sometimes
	  prescriptive! Check out <a
	  href="docs/bitc/spec.html#ty_repr">defrepr</a>.</p>
      </li>
      <li>
	<p>Preserve mutability as a first-class notion in the
	language. Monads, effect types, and the like are wonderful
	things, but languages that rely on them have yet to
	demonstrate acceptable performance on systems problems.</p>
      </li>
      <li>
	<p>Provide a modern type system in the style of Haskell or ML,
	  including type inference and type classes, without giving up
	  data structure representation and mutability.
	</p>
      </li>
      <li>
	<p>Provide first class functions and type-safe abstraction
	  mechanisms to programmers who can't give up performance to
	  get them:</p>
<pre>
(define (add-one x) (+ 1 x))
add-one: (forall (Arith 'a) (fn 'a -> 'a))
</pre>
      </li>
      <li>
	<p>Provide a complete formal semantics in automated form, so
	  that it is possible to reason formally about specialized
	  BitC programs.</p>
      </li>
      <li>
	<p>Develop the proving technology necessary to do useful
	  verification about programs written in such a language.</p>
      </li>
    </ul>
    <p>
      As a litmus test, it is possible to write a MPEG decoder or
      SHA-1 hash algorithm in BitC that is fully safe, but performs
      competatively with the C implementation. Today, that can't be
      done in SML, O'Caml, or Haskell.
    </p>
    <h2>Target Platforms</h2>
    <p>
      The BitC bootstrap compiler compiles to portable ANSI&nbsp;C
      code. By tweaking a single header file and writing a
      target-specific header file and writing a procedure object thunk
      function it is possible to port the research compiler to
      essentially any target platform. The current source tree is
      known to work on IA32 and AMD64/X86-64 targets, and includes
      untested ports to SPARC and SPARC64. Contributions for new
      targets would be very welcome.
    </p>
    <h2>Mailing Lists</h2>
    <p>
      At present, the main mailing list for the BitC project is <a
      href="http://www.bitc-lang.org/mailman/listinfo/bitc-dev">bitc-dev</a>.
      These lists are intended primarily for developers and
      architects. When a release exists, we will add a user-oriented
      list as well.
    </p>
  </body>
</html>
