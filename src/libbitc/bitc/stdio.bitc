;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;
;; Copyright (C) 2006, Johns Hopkins University.
;; Copyright (C) 2008, The EROS Group, LLC.
;; All rights reserved.
;;
;; Redistribution and use in source and binary forms, with or
;; without modification, are permitted provided that the following
;; conditions are met:
;;
;;   - Redistributions of source code must contain the above 
;;     copyright notice, this list of conditions, and the following
;;     disclaimer. 
;;
;;   - Redistributions in binary form must reproduce the above
;;     copyright notice, this list of conditions, and the following
;;     disclaimer in the documentation and/or other materials 
;;     provided with the distribution.
;;
;;   - Neither the names of the copyright holders nor the names of any
;;     of any contributors may be used to endorse or promote products
;;     derived from this software without specific prior written
;;     permission. 
;;
;; THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
;; "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
;; LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
;; A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
;; OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
;; SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
;; LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
;; DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
;; THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
;; (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
;; OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(bitc-version "0.10")
(interface bitc.stdio
  (import bitc.string as str)
  (import bitc.list as lst)

  (defstruct stream : ref external bitc_stdioStream)

  ;; Raised when a read is attempted on a write-only stream, or when
  ;; a write is attempted on a read-only stream.
  (proclaim NoPermission : exception external ExNoPermission)
  (proclaim FileIsClosed : exception external ExFileIsClosed)
  (proclaim AtEOF : exception external ExAtEOF)
  (proclaim NotUTF8 : exception external ExNotUTF8)

  (defexception NoPermission)
  (defexception FileIsClosed)
  (defexception AtEOF)
  (defexception NotUTF8)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; FOLLOWING ARE PRIMITIVE, IMPLEMENTED IN THE C SUPPORT LIBRARY
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  (proclaim eof?:(fn stream -> bool) external bitc_stdio_eofp)

  ;; Open a file with given name and mode
  (proclaim open:(fn string string -> stream) external bitc_stdio_open)
  (proclaim close:(fn stream -> ()) external bitc_stdio_close)

  (proclaim stdin:stream external bitc_stdio_stdin)
  (proclaim stdout:stream external bitc_stdio_stdout)
  (proclaim stderr:stream external bitc_stdio_stderr)

  ;; Read a single character from an input stream.
  (proclaim read-char:(fn stream -> char) external bitc_stdio_read_char)
  ;; Write a single character to an input stream.
  (proclaim write-char:(fn stream char -> ()) external bitc_stdio_write_char)
  ;; Read a single byte from an input stream.
  (proclaim read-byte:(fn stream -> uint8) external bitc_stdio_read_byte)
  ;; Write a single byte to an input stream.
  (proclaim write-byte:(fn stream uint8 -> ()) external bitc_stdio_write_byte)

  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; FOLLOWING **OUGHT** TO HAVE PRIVATE IMPLEMENTATIONS PROCLAIMED
  ;; HERE, BUT CANNOT UNTIL WE HAVE bitc-ar
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

  ;; String Output
  ;;(proclaim write-string:(fn stream string -> word) external bitc_stdio_write_string)

  ;; This is quite horrible, but until we have closure conversion 
  ;; implemented it will have to suffice.
  (define (write-string ios s)
    (lst.map (lambda (c) (write-char ios c))
  	     (str.string->list s)))

  ;; Integer Output
  (define (write-int ostream x:'a base:'a)
    (define digits (array #\0 #\1 #\2 #\3 #\4 #\5 #\6 #\7 #\8 #\9 
			  #\a #\b #\c #\d #\e #\f))
    
    (if (< x 0)
	(begin (write-char ostream #\-)
	       (set! x (* x -1)))
	())
    
    (define log:'a 1)
    (do ((y x (/ y base)))
	((== (/ y base) 0) ())  
	(set! log (* log base)))
    
    ;; (/ x log) is the present digit to output
    (do ((x x (- x (* (/ x log) log)))
	 (log log (/ log base)))
	((== log 0) ())	
	(write-char ostream  
			  (array-nth digits 
				     (convert (/ x log))))))
  
  ;; Read a string from an input stream.
  ;;(proclaim read-string:(fn stream word -> string) external)

)
