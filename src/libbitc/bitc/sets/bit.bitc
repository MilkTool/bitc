//////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2010, Jonathan S. Shapiro
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
//   - Redistributions of source code must contain the above 
//     copyright notice, this list of conditions, and the following
//     disclaimer. 
//
//   - Redistributions in binary form must reproduce the above
//     copyright notice, this list of conditions, and the following
//     disclaimer in the documentation and/or other materials 
//     provided with the distribution.
//
//   - Neither the names of the copyright holders nor the names of any
//     of any contributors may be used to endorse or promote products
//     derived from this software without specific prior written
//     permission. 
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////

bitc version 0.11

interface bitc.sets.bit {
  boxed struct bitset {
    nElem : mutable word
    nWords : mutable word
    bits : mutable (mutable uint32)[]
  }

  def make() = bitset(0, 0, vector(0))

  def isEmpty(s:bitset) = s.nElem == 0;

  def contains(s:bitset, n:word) = {
    if s.nWords*32 > n
      then {
        let w = n/32 in
          let bit = 1 << (n % 32) in
            (s.bits[w] & bit) != 0
      }
      else {
        return false
      }
  }

  def set(s: bitset, n:word, on) = {
    let needWords = (n+32)/32 in
      when s.nWords < needWords
      do let v = s.bits in {
          s.bits := MakeVector(needWords, lambda(n) {
            if n < s.nWords
              then v[n]
              else 0
	  })
	  s.nWords := needWords
        }

    let w = n/32 in
      let bit = 1 << (n % 32) in
        let want = { if (on) then s.bits[w] | bit
                             else s.bits[w] & ~bit } in
          when s.bits[w] != want
          do {
            s.bits[w] := want;
            s.nElem := if (on) then s.nElem + 1 else s.nElem - 1
          }
  }

  def insert(s, n) = set(s, n, true)
  def remove(s, n) = set(s, n, false)
}
