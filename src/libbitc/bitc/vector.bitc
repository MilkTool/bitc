//////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2006, Johns Hopkins University.
// Copyright (C) 2010, Jonathan S. Shapiro
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
//   - Redistributions of source code must contain the above 
//     copyright notice, this list of conditions, and the following
//     disclaimer. 
//
//   - Redistributions in binary form must reproduce the above
//     copyright notice, this list of conditions, and the following
//     disclaimer in the documentation and/or other materials 
//     provided with the distribution.
//
//   - Neither the names of the copyright holders nor the names of any
//     of any contributors may be used to endorse or promote products
//     derived from this software without specific prior written
//     permission. 
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////

bitc version 0.11

interface bitc.vector {
  import bitc.list as lst

  def vector_map(vec, f)
    "Apply procedure f to each element of vector."
    = do pos = 0 then 1 + pos
        until pos == vec.length 
        giving ()
      {
        f(vec[pos])
      }

  // BUG: This was intended to be tail recursive!
  def vectorToList(vec : 'a[]) 
    "Given a vector, return a list of its elements."
    = {
        def subvectorToList(vec, pos, len) = 
            if pos > len then throw IndexBoundsError
            else if pos == len then nil : list('a)
            else cons(vec[pos], subvectorToList(vec, pos+1, len))

        subvectorToList(vec, 0, vec.length)
      }

  def make_mutable_vector(n, e : mutable 'a) =
    MakeVector(n, lambda(i) {e})


  def listToVector(l)
    "Given a list, return a vector of its elements."
    = MakeVector(length(l), lambda(n) {lst.list_nth(l, n)})
}

