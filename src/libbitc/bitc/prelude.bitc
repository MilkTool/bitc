//////////////////////////////////////////////////////////////////////////
//
// Copyright (C) 2006, Johns Hopkins University.
// Copyright (C) 2010, Jonathan S. Shapiro
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or
// without modification, are permitted provided that the following
// conditions are met:
//
//   - Redistributions of source code must contain the above 
//     copyright notice, this list of conditions, and the following
//     disclaimer. 
//
//   - Redistributions in binary form must reproduce the above
//     copyright notice, this list of conditions, and the following
//     disclaimer in the documentation and/or other materials 
//     provided with the distribution.
//
//   - Neither the names of the copyright holders nor the names of any
//     of any contributors may be used to endorse or promote products
//     derived from this software without specific prior written
//     permission. 
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
//////////////////////////////////////////////////////////////////////////

bitc version 0.11

interface bitc.prelude {

  ///////////////////////////////////////////////////////////////
  //    Exception Defintions
  ///////////////////////////////////////////////////////////////
  def OutOfMemory : exception external ExOutOfMemory
  def IndexBoundsError : exception external ExIndexBoundsError

  exception OutOfMemory  
  exception IndexBoundsError  

  ///////////////////////////////////////////////////////////////
  //    SPECIAL built-in  typeclasses. Instances of these are
  //    generated internally by the compiler.
  ///////////////////////////////////////////////////////////////
  
  // Set of all by-reference types, covering (ref 'a), (vector 'a),
  // boxed structure types, boxed union types, and exception.
  closed trait RefTypes('a) {}

  // Type class describing all types 'a that can receive a copy from
  // type 'b. This is NOT symmetric. For example:
  //   (forall ((LiteralUnitType int32 'a))
  //     (CopyFromTo 'a 'b)
  //     but NOT (CopyFromTo 'b 'a))
  closed trait CopyFromTo('a, 'b) {}

  // Type class relating two types 'a, 'b such that they are
  // compatible under binding, assignment, and argument passing. This
  // relation is symmetric.
  //
  // (CopyCompat 'a 'b) => (CopyFromTo 'a 'b) AND (copy-from-to 'b 'a)
  closed trait CopyCompat('a, 'b) {}

  // Type class identifying the set of types for which a literal
  // syntax exists. This is actually NOT an incestuously magical type
  // class, but we need to declare it here so that LiteralUnitType
  // (below) can be properly quantified.
  closed trait LiteralType('a) {}

  // Type class used for record polymorphism. Describes a field/method
  // of some structure type 's having a field/method 'nm with type 'a.
  // This type class is called HasField, but really means 
  // HasField-or-method
  closed trait HasField('s, 'nm, 'a) {}
  
  ///////////////////////////////////////////////////////////////
  //    Structure and union definitions 
  ///////////////////////////////////////////////////////////////

  unboxed union optional('a) {
    none
    some { value : 'a }
  }

  unboxed union nullable('a) forall RefTypes('a) {
      null
      not_null { ptr: 'a }
  }

  boxed union list('a) {
    nil
    cons { car:'a cdr: list('a) }
  }
  
  // The pair structure
  unboxed struct pair('a, 'b) {
    fst: 'a
    snd: 'b
  }

  ///////////////////////////////////////////////////////////////
  //    Primitive arithmetic proclamations 
  ///////////////////////////////////////////////////////////////

  // Following is a sleazy (but clever -- blame Swaroop) trick for
  // getting comparison and arithmetic operations defined for the
  // built-in types with minimal hassle. We define the operations as
  // polymorphic using the reserved namespace, and then set up
  // instances below using these to instantiate the core type classes
  // over the primitive types. We then rely on the polyinstantiator to
  // instantiate them only at the types where they are supposed to
  // occur.
  //
  // The concrete implementations for most of these are handled
  // in runtime.h. A notable exception is that the built-in string
  // type is a member of Ord whose implementation is found in
  // libbitc.a

  def __+ : fn('a, 'a) -> 'a external
  def __- : fn('a, 'a) -> 'a external
  def __* : fn('a, 'a) -> 'a external
  def __/ : fn('a, 'a) -> 'a external
  def __negate : fn('a) -> 'a external

  def __% : fn('a, 'a) -> 'a external

  def __== : fn('a, 'a) -> bool external
  def __!= : fn('a, 'a) -> bool external
  def __<  : fn('a, 'a) -> bool external
  def __<= : fn('a, 'a) -> bool external
  def __>  : fn('a, 'a) -> bool external
  def __>= : fn('a, 'a) -> bool external

  def __b_and : fn('a, 'a) -> 'a external
  def __b_or  : fn('a, 'a) -> 'a external
  def __b_not : fn('a)     -> 'a external
  def __b_xor : fn('a, 'a) -> 'a external

  def __<<    : fn('a, word) -> 'a external
  def __>>    : fn('a, word) -> 'a external


  // Mixfix processing will process not(a) via not_ into not_((a)),
  // which is okay because not_ is bound to not, so the whole thing
  // resolves to not(a)...
  //
  // Makes your head spin. No?

  def not     : fn(bool) -> bool external

  def !_   = not
  def not_ = not

  def ! = not

  // Conversion operation. This one is actually quite dangerous,
  // and I'm not convinced that we should have it at all. If we *do*
  // have it, then I am inclined to think that it should perhaps have
  // syntactic support in the form of a first argument that is a 
  // type name.

  def SignExtend : fn('a) -> 'b external
  def ZeroExtend : fn('a) -> 'b external
  def Truncate   : fn('a) -> 'b external

  def unsigned   : fn('a) -> 'b external
  def signed     : fn('a) -> 'b external

  def convert    : fn('a) -> 'b external

  // This is the < operator to be used for the 
  // index computation. By declaring external, we force 
  // the polyinstantiator to keep this definition.
  // By giving the proper external name, we give it the 
  // correct function to use.
  def __index_lt : fn(word, word) -> bool external bitc_index_lt

  ///////////////////////////////////////////////////////////
  // TYPES THAT HAVE LITERALS
  ///////////////////////////////////////////////////////////

  instance LiteralType(char)

  instance LiteralType(word)
  instance LiteralType( int8)
  instance LiteralType(uint8)
  instance LiteralType( int16)
  instance LiteralType(uint16)
  instance LiteralType( int32)
  instance LiteralType(uint32)
  instance LiteralType( int64)
  instance LiteralType(uint64)

  instance LiteralType(float)
  instance LiteralType(double)
  instance LiteralType(quad)

  instance LiteralType(string)


  ///////////////////////////////////////////////////////////
  // TYPE CLASS FOR INTEGER LITERALS
  ///////////////////////////////////////////////////////////

  closed trait IntLit('a) forall LiteralType('a) {}

  instance IntLit(word)
  instance IntLit( int8)
  instance IntLit(uint8)
  instance IntLit( int16)
  instance IntLit(uint16)
  instance IntLit( int32)
  instance IntLit(uint32)
  instance IntLit( int64)
  instance IntLit(uint64)

  ///////////////////////////////////////////////////////////
  // TYPE CLASS FOR FLOATING POINT LITERALS
  ///////////////////////////////////////////////////////////
  closed trait FloatLit('a) forall LiteralType('a) {}

  instance FloatLit(float)
  instance FloatLit(double)
  instance FloatLit(quad)  

  closed trait Unsigned('a) forall IntLit('a) {}
  instance Unsigned(word)
  instance Unsigned(uint8)
  instance Unsigned(uint16)
  instance Unsigned(uint32)
  instance Unsigned(uint64)

  closed trait Signed('a) forall IntLit('a) {}
  instance Signed( int8)
  instance Signed( int16)
  instance Signed( int32)
  instance Signed( int64)

  ///////////////////////////////////////////////////////////
  // TYPES ADMITTING EQUALITY
  ///////////////////////////////////////////////////////////
  trait Eq('a) {
    _==_ : fn('a,'a) -> bool
    _!=_ : fn('a,'a) -> bool
  }
  
  // For s-exprs:
  def == = _==_
  def != = _!=_

  ///////////////////////////////////////////////////////////
  // TYPES ADMITTING ORDERING
  ///////////////////////////////////////////////////////////
  trait Ord('a) forall Eq('a) {
    _<_  : fn('a, 'a) -> bool
    _>_  : fn('a, 'a) -> bool
    _<=_ : fn('a, 'a) -> bool
    _>=_ : fn('a, 'a) -> bool
  }
  
  // For s-exprs:
  def < = _<_
  def <= = _<=_
  def > = _>_
  def >= = _>=_

  ///////////////////////////////////////////////////////////
  // TYPES ADMITTING (FOUR-FUNCTION) ARITHMETIC
  ///////////////////////////////////////////////////////////
  trait Arith('a) forall Ord('a) {
    _+_ : fn('a, 'a) -> 'a
    _-_ : fn('a, 'a) -> 'a
    _*_ : fn('a, 'a) -> 'a
    _/_ : fn('a, 'a) -> 'a
    negate : fn('a) -> 'a
  }

  def -_ = __negate

  // For s-exprs:
  def + = _+_
  def - = _-_
  def * = _*_
  def / = _/_

  // def mixtest1 = 1 + 2 + 3:int8;
  // def mixtest2 = 1 * 2 + 3:int8;
  // def mixtest3 = 1 + 2 * 3:int8;
  // def mixtest4 = 1 + (2) + 3:int8;
  // def mixtest5 = 1 + (2) * 3:int8;
  // def mixtest6 = 1 * (2) + 3:int8;
  // def mixtest7 = 7 == 1 + 2 * 3:int8;

  def _**_(a, b) = if b == 0 then 1 else a * _**_(a, b - 1)

  ///////////////////////////////////////////////////////////
  // TYPES ADMITTING INTEGER MODULUS ARITHMETIC
  ///////////////////////////////////////////////////////////
  trait IntArith('a) forall Arith('a), IntLit('a) {
    _%_ : fn('a, 'a) -> 'a
  }

  // For s-exprs:
  def % = _%_

  ///////////////////////////////////////////////////////////
  // TYPES ADMITTING BITWISE ARITHMETIC
  ///////////////////////////////////////////////////////////
  trait Bitwise('a) forall Unsigned('a) {
      bit_and  : fn('a, 'a)   -> 'a   // Bitwise AND
      bit_or   : fn('a, 'a)   -> 'a   // Bitwise OR
      bit_not  : fn('a)       -> 'a   // One's Complement
      bit_xor  : fn('a, 'a)   -> 'a   // Bitwise XOR
      _<<_     : fn('a, word) -> 'a   // Left Shift
      _>>_     : fn('a, word) -> 'a   // Right Shift
  }

  // For s-exprs:
  def << = _<<_
  def >> = _>>_

  // FIX: should the named versions of these now be defunct?
  def _&_ = bit_and
  def _|_ = bit_or
  def _^_ = bit_xor
  def ~_ = bit_not

  // For s-exprs:
  def & = _&_ 
  def | = _|_ 
  def ^ = _^_ 
  def ~ = ~_

  ///////////////////////////////////////////////////////////
  // Instance Definitions
  ///////////////////////////////////////////////////////////

  instance Eq(()) {
    _==_ = __==
    _!=_ = __!=
  }
    
  instance Eq(char) {
    _==_ = __==
    _!=_ = __!=
  }

  instance Eq(bool) {
    _==_ = __==
    _!=_ = __!=
  }

  instance Eq(int8) {
    _==_ = __==
    _!=_ = __!=
  }

  instance Eq(int16) {
    _==_ = __==
    _!=_ = __!=
  }

  instance Eq(int32) {
    _==_ = __==
    _!=_ = __!=
  }

  instance Eq(int64) {
    _==_ = __==
    _!=_ = __!=
  }

  instance Eq(uint8) {
    _==_ = __==
    _!=_ = __!=
  }

  instance Eq(uint16) {
    _==_ = __==
    _!=_ = __!=
  }

  instance Eq(uint32) {
    _==_ = __==
    _!=_ = __!=
  }

  instance Eq(uint64) {
    _==_ = __==
    _!=_  = __!=
  }

  instance Eq(word) {
    _==_ = __==
    _!=_  = __!=
  }

  instance Eq(float) {
    _==_ = __==
    _!=_  = __!=
  }

  instance Eq(double) {
    _==_ = __==
    _!=_  = __!=
  }

  instance Eq(quad) {
    _==_ = __==
    _!=_  = __!=
  }

  instance Eq(string) {
    _==_ = __==
    _!=_ = __!=
  }

  instance Ord(char) {
    _<_  = __<
    _>_  = __>
    _<=_ = __<=
    _>=_ = __>=
  }
  
  instance Ord(bool) {
    _<_  = __<
    _>_  = __>
    _<=_ = __<=
    _>=_ = __>=
  }

  instance Ord(int8) {
    _<_  = __<
    _>_  = __>
    _<=_ = __<=
    _>=_ = __>=
  }
  instance Ord(int16) {
    _<_  = __<
    _>_  = __>
    _<=_ = __<=
    _>=_ = __>=
  }
  instance Ord(int32) {
    _<_  = __<
    _>_  = __>
    _<=_ = __<=
    _>=_ = __>=
  }
  instance Ord(int64) {
    _<_  = __<
    _>_  = __>
    _<=_ = __<=
    _>=_ = __>=
  }
  instance Ord(uint8) {
    _<_  = __<
    _>_  = __>
    _<=_ = __<=
    _>=_ = __>=
  }
  instance Ord(uint16) {
    _<_  = __<
    _>_  = __>
    _<=_ = __<=
    _>=_ = __>=
  }
  instance Ord(uint32) {
    _<_  = __<
    _>_  = __>
    _<=_ = __<=
    _>=_ = __>=
  }
  instance Ord(uint64) {
    _<_  = __<
    _>_  = __>
    _<=_ = __<=
    _>=_ = __>=
  }

  instance Ord(word) {
    _<_  = __<
    _>_  = __>
    _<=_ = __<=
    _>=_ = __>=
  }

  instance Ord(float) {
    _<_  = __<
    _>_  = __>
    _<=_ = __<=
    _>=_ = __>=
  }
  instance Ord(double) {
    _<_  = __<
    _>_  = __>
    _<=_ = __<=
    _>=_ = __>=
  }
  instance Ord(quad) {
    _<_  = __<
    _>_  = __>
    _<=_ = __<=
    _>=_ = __>=
  }

  instance Ord(string) {
    _<_  = __<
    _>_ = __>
    _<=_ = __<=
    _>=_ = __>=
  }

  instance Arith(int8) {
    _+_ = __+
    _-_ = __-
    _*_ = __*
    _/_ = __/
    negate = __negate
  }
  instance Arith(int16) {
    _+_ = __+
    _-_ = __-
    _*_ = __*
    _/_ = __/
    negate = __negate
  }
  instance Arith(int32) {
    _+_ = __+
    _-_ = __-
    _*_ = __*
    _/_ = __/
    negate = __negate
  }
  instance Arith(int64) {
    _+_ = __+
    _-_ = __-
    _*_ = __*
    _/_ = __/
    negate = __negate
  }
  instance Arith(uint8) {
    _+_ = __+
    _-_ = __-
    _*_ = __*
    _/_ = __/
    negate = __negate
  }
  instance Arith(uint16) {
    _+_ = __+
    _-_ = __-
    _*_ = __*
    _/_ = __/
    negate = __negate
  }
  instance Arith(uint32) {
    _+_ = __+
    _-_ = __-
    _*_ = __*
    _/_ = __/
    negate = __negate
  }
  instance Arith(uint64) {
    _+_ = __+
    _-_ = __-
    _*_ = __*
    _/_ = __/
    negate = __negate
  }
  instance Arith(word) {
    _+_ = __+
    _-_ = __-
    _*_ = __*
    _/_ = __/
    negate = __negate
  }

  instance Arith(float) {
    _+_ = __+
    _-_ = __-
    _*_ = __*
    _/_ = __/
    negate = __negate
  }
  instance Arith(double) {
    _+_ = __+
    _-_ = __-
    _*_ = __*
    _/_ = __/
    negate = __negate
  }
  instance Arith(quad) {
    _+_ = __+
    _-_ = __-
    _*_ = __*
    _/_ = __/
    negate = __negate
  }

  instance IntArith(int8)   { _%_ = __% }
  instance IntArith(int16)  { _%_ = __% }
  instance IntArith(int32)  { _%_ = __% }
  instance IntArith(int64)  { _%_ = __% }
  instance IntArith(uint8)  { _%_ = __% }
  instance IntArith(uint16) { _%_ = __% }
  instance IntArith(uint32) { _%_ = __% }
  instance IntArith(uint64) { _%_ = __% }
  instance IntArith(word)   { _%_ = __% }

  instance Bitwise(uint8) {
    bit_and = __b_and
    bit_or = __b_or
    bit_not = __b_not
    bit_xor = __b_xor
    _<<_ =  __<<
    _>>_ =  __>>
  }
  instance Bitwise(uint16) {
    bit_and = __b_and
    bit_or = __b_or
    bit_not = __b_not
    bit_xor = __b_xor
    _<<_ =  __<<
    _>>_ =  __>>
  }
  instance Bitwise(uint32) {
    bit_and = __b_and
    bit_or = __b_or
    bit_not = __b_not
    bit_xor = __b_xor
    _<<_ =  __<<
    _>>_ =  __>>
  }
  instance Bitwise(uint64) {
    bit_and = __b_and
    bit_or = __b_or
    bit_not = __b_not
    bit_xor = __b_xor
    _<<_ =  __<<
    _>>_ =  __>>
  }
  instance Bitwise(word) {
    bit_and = __b_and
    bit_or = __b_or
    bit_not = __b_not
    bit_xor = __b_xor
    _<<_ =  __<<
    _>>_ =  __>>
  }

  trait Length('a) {
    length: fn('a) -> word		// built-in => no methods
  }

  instance Length('a[]) {
    length = lambda (x) x.length
  }
}
