/* -*- mode: c -*-  */

/// @page ToDo To Do List for First Release
///
///
/// Here are all of the open "to do" items before we can release R1 of
/// the BitC Research Compiler, along with current status:
///
/// <h1>Syntax Issues</h1>
/// <ol>
/// <li>
/// Decide on and implement the final surface syntax for BitC, which
/// will <em>not</em> be an S-expression syntax.
///
/// <b>Complexity</b>: Implementation is straightforward, but overall
/// complexity is moderate, because we need to make decisions about
/// how to deal with things like looping constructs.
/// </li>
/// <li>
/// Figure out what, if anything, we want to do about inheritance and 
/// virtual functions in R1, in particular for addressing things along
/// the lines of Common Type System compatibility. This may be something
/// that should be deferred.
///
/// <b>Complexity</b>: High. There are type system issues, but more 
/// importantly, the whole design space is one in which everyone has
/// an opinion but converging on workable answers is challenging. There
/// has been productive discussion on-going on the BitC list.
/// </li>
/// </ol>
///
/// <h1>Technical Issues</h1>
/// <ol>
/// <li>
/// Implement the "constantness by path" rule, including the CONST type
/// metaconstructor.
///
/// <b>Rationale:</b> Without this, inner references and by-ref can
/// create a number of problems.
///
/// <b>Status:</b> Essentially done as of 12/12/2008. Needs to be
/// documented in the specification.
///
/// <b>Complexity:</b> This turned out to be moderately nasty.
/// </li>
/// <li>
/// Define and enforce the rules for initializer ordering. The
/// proposed rules are defined in 
/// @ref InitializerRules.
///
/// <b>Rationale:</b> Without this, our ability to initialize is
/// severely restricted.
///
/// <b>Status:</b> Defined. Effect types must be implemented before
/// this can be completed.
///
/// <b>Complexity:</b> Straightforward.
/// </li>
/// <li>
/// Implement and enforce purity of initializer expressions and the
/// <code>(pure&nbsp;...)</code> form more generally.
///
/// <b>Rationale:</b> Without this, many globals must be declared
/// mutable that could otherwise be constant, which in turn impedes 
/// optimization.
///
/// <b>Status:</b> Depends on implementation of effect types.
///
/// <b>Complexity:</b> Trivial once effect types are done.
/// </li>
/// <li>
/// Implement typeclass instance resolution by lexical lookup rule.
///
/// <b>Rationale:</b> Solves the "colliding type class" problem.
///
/// <b>Status:</b> Not yet started.
///
/// <b>Complexity:</b> Requires that we switch to a back-tracking
/// solver.
/// </li>
/// <li>
/// Implement capsule/object notion.
///
/// <b>Rationale:</b> Gives us just enough existential typing to get by.
///
/// <b>Status:</b> Shap has implemented structure methods. Object
/// methods are straightforward, but the associated type constraints
/// cannot be expressed without <tt>has-field</tt>.
///
/// <b>Complexity:</b> Straightforward.
/// </li>
/// </ol>
/// <h1>Technical Issues (Completed)</h1>
/// <ol>
/// <li>
/// Implement literal instantiation.
///
/// <b>Rationale:</b> Essential for efficient I/O implementation.
///
/// <b>Status:</b> Dropped. See <a href="#array-ref">array-ref</a>. A
/// specialized form of literal instantiation was implemented to
/// support has-field, but this case was straightforward.
/// An integer literal was to have been simultaneously a member of a
/// single-element integer literal type and a member of the usual
/// integer types. That proved to be excessively complicated, which is
/// why we dropped the more general form of literal instantiation.
///
/// <b>Complexity:</b> Straightforward.
/// </li>
/// <li>
/// <a name="array-ref">Array-ref</a>
///
/// <b>Rationale:</b> Essential for efficient I/O
/// implementation. Replaces literal instantiation.
///
/// <b>Status:</b> Completed
///
/// <b>Complexity:</b> Straightforward.
/// </li>
/// <li>
/// Implement record inference (a.k.a. <code>has-field</code>)
///
/// <b>Rationale:</b> Required to state type class dependencies for
/// objects/capsules. Also gives us a form of lateral abstraction.
///
/// <b>Status:</b> Straightforward, but not yet started. Ideal
/// implementation requires literal instantiation.
///
/// <b>Complexity:</b> Requires updates in the solver. Turned out to
/// be less straightforward than we initially thought, because the
/// method rewrite can occur late (in the instantiator), which
/// required some care about the ordering of AST rewrites and calls to
/// the type checker to re-type things.
///
/// Has-field is a specialized form of literal inference, but each
/// field name is a member only of its corresponding unit type. There
/// is no generalized type of field names.
/// </li>
/// </ol>
/// <h1>Non-Technical Issues</h1>
/// <ol>
/// <li>
/// Go through and document (doxygen comment) all of the source code.
///
/// <b>Status:</b> In progress, not yet complete.
/// </li>
/// <li>
/// Specify syntax for function types expressing effects.
///
/// <b>Status:</b> Two proposals exist. We need to look at usability
/// issues here.
/// </li>
/// <li>
/// Update spec to reflect all of the above.
///
/// <b>Status:</b> Not yet started.
/// </li>
/// </ol>
/// <h1>Dropped</h1>
/// <ol>
/// <li>
/// Implement subtyping on structures
///
/// <b>Status:</b> Abandoned in favor of using type classes.
/// </li>
/// <li>
/// Implement existential types.
///
/// <b>Status:</b> Dropped in favor of the capsule/object notion.
/// </li>
/// </ol>
