/* -*- Mode: c -*- */
/*
 * Copyright (C) 2005, The EROS Group, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 *
 *   - Redistributions of source code must contain the above
 *     copyright notice, this list of conditions, and the following
 *     disclaimer.
 *
 *   - Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions, and the following
 *     disclaimer in the documentation and/or other materials
 *     provided with the distribution.
 *
 *   - Neither the names of the copyright holders nor the names of any
 *     of any contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

//
// PRIMARY: Whether this is a ground type in the BitC type system.
//
// CSIMPLE: Whether this is a non-composite type in the emitted C
//          code. Includes all scalar primary types and (eventually)
//          types that are represented as pointers
//
// ATOMIC   Primitive (non-composed values) SSA phase *was* using this
// REF      True if the type is a reference type
// PRIMINT   Primary integer type
// PRIMFLOAT Primary floating point type
//

/*      NAME       PRIMARY CSIMPLE ATOMIC SCALAR REF    PRIMINT PRIMFLOAT*/
DEFKIND(unit,      true,   true,   true,  true,  false, false,  false)
DEFKIND(bool,      true,   true,   true,  true,  false, false,  false)
DEFKIND(char,      true,   true,   true,  true,  false, false,  false)
DEFKIND(word,      true,   true,   true,  true,  false, true,   false)
DEFKIND(int8,      true,   true,   true,  true,  false, true,   false)
DEFKIND(int16,     true,   true,   true,  true,  false, true,   false)
DEFKIND(int32,     true,   true,   true,  true,  false, true,   false)
DEFKIND(int64,     true,   true,   true,  true,  false, true,   false)
DEFKIND(uint8,     true,   true,   true,  true,  false, true,   false)
DEFKIND(uint16,    true,   true,   true,  true,  false, true,   false)
DEFKIND(uint32,    true,   true,   true,  true,  false, true,   false)
DEFKIND(uint64,    true,   true,   true,  true,  false, true,   false)
DEFKIND(float,     true,   true,   true,  true,  false, false,  true)
DEFKIND(double,    true,   true,   true,  true,  false, false,  true)
DEFKIND(quad,      true,   true,   true,  true,  false, false,  true)
//Strings are considered scalars by special dispensation, because they
//are immutable.
DEFKIND(string,    true,   true,   false, true,  true,  false,  true)

//DEFKIND(bitfield,  true,   false,  true,  false, false,  false)
DEFKIND(fn,        true,   false,  true,  true,  false, false,  false)
DEFKIND(method,    true,   false,  true,  true,  false, false,  false)
DEFKIND(tyfn,      true,   false,  true,  false, false, false,  false)
DEFKIND(uconv,     true,   false,  true,  false, false, false,  false)
DEFKIND(uconr,     true,   false,  false, false, true,  false,  false)

DEFKIND(tvar,      false,  false,  false, false, false, false,  false)
DEFKIND(fnarg,     false,  false,  false, false, false, false,  false)
DEFKIND(structv,   false,  false,  false, false, false, false,  false)
DEFKIND(structr,   false,  true,   false, false, true,  false,  false)
DEFKIND(unionv,    false,  false,  false, false, false, false,  false)
DEFKIND(unionr,    false,  true,   false, false, true,  false,  false)
DEFKIND(uvalv,     false,  false,  false, false, false, false,  false)
DEFKIND(uvalr,     false,  true,   false, false, true,  false,  false)
DEFKIND(array,     false,  false,  false, false, false, false,  false)
DEFKIND(vector,    false,  false,  false, false, true,  false,  false)
DEFKIND(ref,       false,  true,   false, false, true,  false,  false)
// by-ref is not actually used as a type. It is only present to qualify
// at_byreftype since all ASTs must have a type. Since by-ref types
// can only appear within argvecs, the my-ref-ness is marked on the
// component-flags of ty_fnArgvec, and the ty_byref wrapper is
// discarded henceforth.
DEFKIND(byref,     false,  true,   false, false, true,  false,  false)
DEFKIND(mutable,   false,  false,  false, false, false, false,  false)
DEFKIND(const,     false,  false,  false, false, false, false,  false)
DEFKIND(mbTop,     false,  false,  false, false, false, false,  false)
DEFKIND(mbFull,    false,  false,  false, false, false, false,  false)
DEFKIND(exn,       false,  false,  false, false, true,  false,  false)
DEFKIND(dummy,     false,  false,  false, false, false, false,  false)

// The following are constraints, stricttly speaking, but are types at
// the next level.
DEFKIND(typeclass, false,  false,  false, false, false, false,  false)
// Meta polymorphic constraint (MPC)
DEFKIND(pcst, false,  false,  false, false, false, false,  false)
// Kind variable for the MPC
DEFKIND(kvar, false,  false,  false, false, false, false,  false)
// Fixed kinds for the MPC. The type-header has static types
// to identify the two kinds (mono/poly) that can exist.
DEFKIND(kfix, false,  false,  false, false, false, false,  false)

/* For internal use ONLY */
//DEFKIND(closure,   false,  false,  false, false, true,  false,  false)
DEFKIND(letGather, false,  false,  false, false, false, false,  false)

#undef DEFKIND

