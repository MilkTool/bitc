/* -*- Mode: c -*- */
/*
 * Copyright (C) 2005, The EROS Group, LLC.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or
 * without modification, are permitted provided that the following
 * conditions are met:
 *
 *   - Redistributions of source code must contain the above 
 *     copyright notice, this list of conditions, and the following
 *     disclaimer. 
 *
 *   - Redistributions in binary form must reproduce the above
 *     copyright notice, this list of conditions, and the following
 *     disclaimer in the documentation and/or other materials 
 *     provided with the distribution.
 *
 *   - Neither the names of the copyright holders nor the names of any
 *     of any contributors may be used to endorse or promote products
 *     derived from this software without specific prior written
 *     permission. 
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
 * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
 * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
 * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
 * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
 * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
 * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

//   ident          name           description
PASS(none,          "<none>",       "<none>")
PASS(parse,         "parser",       "Parsing")

// The parser-constructed AST tree contains at_mixfix nodes. These
// will be converted to expression trees during symbol resolution, but
// that processing has not yet happened. Any passes between here and
// the symbol resolution phase need to be prepared to handle that.

// Simplify DefRepr declarations into annotated unions to reduce the
// number of cases that need to be handled by later passes:
PASS(reprSimp,      "reprsimp",     "Defrepr Simplification")

// Simplify redundant expression sequence wrappers.
PASS(beginSimp,     "beginsimp",    "Some simplifications in the begining")

// Find method declarations within structure and object
// definitions/declarations. Rewrite those by appending the
// corresponding declaration forms just after the structure/object
// definitions/declarations to ensure that type matching requirements
// are met when the corresponding definition is encountered.
PASS(methDecl,      "methdecl",     "Inject method function proclaims")

// We decided to do MixFix processing in the symbol resolution
// pass. This seems to be the cleanest way to treat operator binding
// forms in a way that is consistent with other binding forms.
//
// The introduction of mixfix caused me to change the processing of
// AND and OR. The problem is that these they sit in the middle
// of the infix expression precedence hierarchy. This makes it hard
// to deal with them in the parser, where we no longer know the
// precedence of operators. What we do now is gather them like any
// other operator in the expr_infix production, and rewrite them into
// primitive form as a special case. If we eventually add thunkification,
// they will cease to be primitive, and we'll be able to eliminate the
// special handling.
PASS(symresolve,    "symresolve",   "Symbol Resolution")

// Below here, MixFix nodes have been converted to normal expression
// trees. The at_mixexpr node should not be encountered below this
// point. The effect of Mixfix introduction, syntax introduction, and
// syntax use forms has been processed and the corresponding AST nodes
// removed.

PASS(typeCheck,     "typecheck",    "Type Checking")
PASS(locCheck,      "loccheck",     "Location semantics Checking")
PASS(reprCheck,     "reprcheck",    "Defrepr Consistency Checking")
PASS(noAllocCheck,  "noalloccheck", "No Dynamic Allocation -- Checking")
PASS(initCheck,     "initcheck",    "Initialization Restriction Checking")
PASS(HoistInstLam,  "instlam",      "Hoist instance lambdas")
PASS(npass,         "<npass>",      "<none>")
#undef PASS
